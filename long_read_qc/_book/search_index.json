[["01-Long_read_QC.html", "Long read Quality Control Chapter 1 Introduction", " Long read Quality Control Matthew Gemmell &amp; Helen Hipperson 2021-03-02 Chapter 1 Introduction This practical session aims to introduce you to Long read Quality Control. The topics covered are: Acquiring the workshop data Example of PacBio quality control Example of ONT quality control "],["02-Intro.html", "Chapter 2 Introduction 2.1 The data", " Chapter 2 Introduction 2.1 The data The data for today is in the QC_workshop directory that you copied into your home directory (~) in the Illumina QC day. If you do not have this directory the command to copy it to your home directory is below. cp -r /pub39/tea/matthew/NEOF/QC_workshop/ ~ "],["03-PB.html", "Chapter 3 PacBio", " Chapter 3 PacBio "],["04-ONT.html", "Chapter 4 ONT 4.1 File formats 4.2 Basecalling 4.3 QC of fastq file", " Chapter 4 ONT In this section we are going to carry out a quick QC of ONT data using the tool suite NanoPack and the tool Porechop. For this we will use the fastq files. 4.1 File formats Although we will only be using fastq files for this tutorial it is important to know the other file formats you may encounter when working with ONT data. 4.1.1 Fast5 The raw data from ONT machines come as Fast5 (.fast5) files. This contains the signal data from the pore which can be processed into more useful files. Fast5 files can contain: Raw signal data Run metadata fastq-basecalls Other additional analyses The Fast5 file format is an implementation of the HDF5 file format specifically for ONT sequencing data. For more information on Fast5 and a tool to interface with these types of file please see: https://github.com/nanoporetech/ont_fast5_api 4.1.2 Summary file The MinION and GridION output a single sequencing summary file in addition to the Fast5 files. This file contains metdata which descirbes each sequenced read. We will not use Fast5 or summary files for this tutorial as they are not needed most of the time. It is likely these files will not be intially provided to you by a sequencing service as they are large and not often needed. However, if you do require them you can always ask but be careful with how long the sequencing centre will retain your data. 4.1.3 BAM file BAM files (.bam) are the binary version of SAM files (.sam). This means: BAM files are not human readable whilst SAM files are. SAM files are larger than BAM. Generally programs that can work on SAM files can also work on BAM files. Due to the size difference it is preferable to store data in BAM format over SAM. Even though a BAM file is smaller than their matching SAM file, BAM files are still very large and can be &gt;100GB. SAM stands for Sequence Alignment/Map (the B in BAM is Binary). SAM files are tab delimited and contain alignment information. It can be useful to contain unaligned reads from sequencing machines (e.g. PacBio and ONT) in BAM files as they can contain more metadata in the header and per-record auxiliary tags compared to fastq files. If you are working with SMA/BAM files the following link will prove useful: https://www.htslib.org/ For more information on the SAM and BAM format please see: https://samtools.github.io/hts-specs/SAMv1.pdf 4.1.4 fastq file The fastq file format is very consistent and so there is no real difference between fastq files for Illumina, PacBio, and ONT data. All fastq files will contain a number of lines divisible by 4. This is because each entry/sequence will take up four lines consisting of the following information: Header for fastq entry known as the fastq header. This always begins with a @ This is where you might see the most difference between different data. Different machines and different public databases will use different formats for fastq headers. Sequence content Quality header Always begins with a +. Sometimes also contains the same information as fastq header. Quality Each base in the 2nd line will have a corresponding quality value in this line. Note this uses Phred encoding, of which there are different formats. Most, if not all, new files will use Phred+33 but be careful if you are using older data as it may use a different one. See the Encoding section in the following link for more info: https://en.wikipedia.org/wiki/FASTQ_format. NOTE: @ can be used as a quality value. An example of the information of one sequence/entry is: @Sequence 1 CTGTTAAATACCGACTTGCGTCAGGTGCGTGAACAACTGGGCCGCTTT + =&lt;&lt;&lt;=&gt;@@@ACDCBCDAC@BAA@BA@BBCBBDA@BB@&gt;CD@A@B?B@@ 4.2 Basecalling In short, basecalling is the converting of ONT signals to bases and quality. In other word it is the conversion of Fast5 files to BAM and/or fastq files. There are many tools to carry out basecalling with ONT data with ONT sequencing machines carrying this out themselves. However, if you are interested in the tools used for this the primary ones are Guppy and Albacore. Unfortunately it is quite hard to find information about these tools unless you own an ONT machine. Basecalling with Guppy tutorial: https://denbi-nanopore-training-course.readthedocs.io/en/latest/basecalling/basecalling.html Basecalling with Albacore tutorial: https://denbi-nanopore-training-course.readthedocs.io/en/stable/basecalling/basecalling.html 4.3 QC of fastq file For this tutorial we will carry out quality control and checking on fastq files. Some QC steps can be carried out on summary files and/or BAM files. However we will be using fastq files for a variety of reasons: fastq files are the smallest and so these processes will run quicker and the files will take up less storage. Ideal for a tutorial. Fastq files are the easiest to work with. You will most likely use fastq files in the future for ONT data. If you get your data sequenced by a genomic centre they will most likely give you your data in demultiplexxed (one fastq file per sample) fastq files. ONT machines generally come with in built basecalling and so will most likely provide fastq files as well as the other formats now. Before carrying out any specific commands we will first move into the relevant directory. cd ~/QC_workshop/ONT_QC/ Initialise environment. This needs to be done if you start working in a new terminal. Each terminal will only remember what you have told it. . usenanopack-1.1.0 Look in the directory called data and you will notice there are a few directories. You can see the contents of all these directories with the below command. ls data/* You will notice that each directory has one fastq file. ONT data likes to be organised with data for one sample being in one directory. This is reflected in the software that we will use which likes to be pointed a directory with one sample in it. To start with we will only use the fastq file within the directory called Acinetobacter. As you may have figured out this contains ONT sequencing data of an Acinetobacter genome. Specifically the data is a subset of the SRA (Sequence Read Archive) Run: SRR7119550. 4.3.1 NanoStat The first step is to acquire stats for the sequences in our fastq file. We will use NanoStat (https://github.com/wdecoster/nanostat). NanoStat is one of the many tools contained in the NanoPack suite (https://github.com/wdecoster/nanopack). We will also use the tools NanoPlot and NanoFilt. We will want to have a tidy set of directories at the end of this analysis. It would be an untidy mess if we had all the output files in the current directory. We will therefore be making directories and subdirectories to send our output. mkdir nanostats Finally we will now run NanoStat. The options used are: -n : File name/path for the output. -t : Number of threads the script can use. --fastq : Input data is in fastq format. Other options that can be used are --fasta, --summary, and --bam. NanoStat -n nanostats/Acinetobacter_nanostats.tsv \\ -t 4 --fastq ./data/Acinetobacter/Acinetobacter_genome_ONT.fastq Now we can look at the output text file. In this case we will use the convenient less command. less nanostats/Acinetobacter_nanostats.tsv The file contains four sections with informative headers. These are: General summary A list of general summary metrics. Number, percentage and megabases of reads above quality cutoffs Based on the mean quality value of a read. The &gt;Q5 line shows the number and % of reads with a mean quality above Q5. It also shows the total amount of megabases these reads contain. Top 5 highest mean basecall quality scores and their read lengths Shows the top 5 reads with the highest mean quality scores. Top 5 longest reads and their mean basecall quality score Shows the top 5 longest reads. 4.3.2 Porechop Porechop is a tool to find and remove adapters from ONT data (https://github.com/rrwick/Porechop). Adapters are artificial sequences of no biological value and so you will always want them removed. Porechop is no longer supported but it still works and there is no alternative for adapter removal. Depending on which basecaller was used on your data, adapter removal may have already been carried out. However, it is always best to run porechop if you are not sure. Porechop has a list of known adapters it will look for and remove. These contain: Ligation kit adapters Rapid kit adapters PCR kit adapters Barcodes Native barcoding Rapid barcoding Porechop will look for these adapters at the start and end of each read. Then it will look for adapters within the sequence (known as middle adapters to Porechop). If it finds a middle adapter it will conclude the read is chimeric (a recombinant read containing sequence from 2 or more reads) and split the read. Depending on the number of middle adpaters the chimeric read may split into 2 or more reads. With all that explanation we will now run Porechop. Thankfully the command is relatively straight forward with the options: -t: Number of threads to be used. -i: Input path of a fasta file, fastq file, or a directory. If a directory is specified it will be recursively searched for fastq files. -o: Output path. This will either be a fastq or fasta file name. #Create output directory mkdir porechop #Run porechop command porechop -t 4 -i ./data/Acinetobacter/Acinetobacter_genome_ONT.fastq \\ -o porechop/Acinetobacter.porechop.fastq Porechop will take a while to run. Whilst it is running look at the screen output to get an idea of what it is doing. Once it is finished look at the bottom of the printed results. Questions: How many reads had adapters trimmed from their start? How many bases were removed by adapters being trimmed from the end of reads? How many read were split based on middle adpaters? For more uses of Porechop please see the below links: https://github.com/rrwick/Porechop#quick-usage-examples https://github.com/rrwick/Porechop#full-usage 4.3.3 NanoPlot NanoPlot can be thought of as the FastQC for ONT data. It produces a lot of useful visualisations to investigate the quality of ONT sequencing data. It can be used for fastq, fasta, bam, and sequencing summary files. The link for its github page is: https://github.com/wdecoster/NanoPlot Prior to running NanoPlot we will make a directory for the NanoPlot output. NanoPlot creates a lot of files so well make a subdirectory for the NanoPlot output of porechopped fastq files. mkdir nanoplot mkdir nanoplot/porechop Now to run NanoPlot. The options we will use are: -t: Number of threads to be used. --fastq: Specifies the input path which is a fastq file. -o: Directory where the output will be created. -p: Prefix of output files. It is useful to have \"_\" at the end of the prefix. --plots: Specifies what type of bivariate plot is to be created (more on this later). I find hex to be the best. NanoPlot -t 4 \\ --fastq porechop/Acinetobacter.porechop.fastq \\ -o nanoplot/porechop -p Acinetobacter_ \\ --plots hex You may get below warning. This is fine and can be ignored. /pub37/matt/programs_chos_8/anaconda3/lib/python3.7/_collections_abc.py:702: MatplotlibDeprecationWarning: The global colormaps dictionary is no longer considered public API. return len(self._mapping) /pub37/matt/programs_chos_8/anaconda3/lib/python3.7/_collections_abc.py:720: MatplotlibDeprecationWarning: The global colormaps dictionary is no longer considered public API. yield from self._mapping List the files in the output directory. ls nanoplot/porechop/ You will notice there are quite a few of files which all start with Acinetobacter_ thanks to the -p option. To quickly check all the results we can open the produced html file with firefox. firefox nanoplot/porechop/Acinetobacter_NanoPlot-report.html The first section contains NanoStat output. Quickly look over this and see how it compares to the NanoStat output of the pre-porechopped reads. Tip: To open a new terminal, right click VNC background -&gt; Applications -&gt; Shells -&gt; Bash. After the Summary Statistics section there is a Plots section. This contains the plots: Histogram of read lengths Histogram of Number of reads (y) against Read length (x). Histogram of read lengths after log transformations Histogram of Number of reads (y) against log transformed Read length (x). Weighted Histogram of read lengths Histogram of Number of bases (y) against Read length (x). Weighted Histogram of read lengths after log transformation Histogram of Number of bases (y) against log transformed Read length (x). Dynamic histogram of Read length An interactive Histogram of Number of reads (y) against Read length (x) produced by plotly (https://plotly.com/). You can zoom into areas by clicking and dragging. Makes boxes to zoom into a specific area. Click and drag left or right only to zoom into a specific part of the x axis. Click and drag up or down only to zoom into a specific part of the y axis. Click the home icon on the top right to reset the axes. Yield by length Plot showing the Cumulative yield for minimal length (y) by Read length (x). The cumulative yield is measured in Gigabases (billion bases). This plot is useful to know how many bases you would retain if you filtered reads based on read length. Read lengths vs Average read quality plot using hexagonal bins This is the most informative plot. It is the bivariate plot we indicated we wanted as hexagonal with the option --plots hex. Each hex is a bin with a darker colour representing more reads. At the top of the plot is a histogram of Number of reads against read lengths. At the right of the plot is a sideways histogram of number of reads against average read quality. Questions to be answered with the html file: How long is the longest read? What is the highest mean basecall quality score of a read? How many reads have a mean basecall quality score &gt;Q10? Approximately where is the highest density of reads in terms of read lengths and average read quality. Roughly, do the longer reads have relatively high, medium, or low mean qualities? Using different input files will give you different plots. For more details please see the Plots Generated section on: https://github.com/wdecoster/NanoPlot. 4.3.4 NanoFilt mkdir nanofilt cat porechop/Acinetobacter.porechop.fastq | \\ NanoFilt -l 500 -q 10 &gt; \\ nanofilt/Acinetobacter.nanofiltq10minlen500.porechop.fastq 4.3.5 Final check #Make an output directory before running NanoPlot mkdir nanoplot/nanofiltq10minlen500_porechop #Run NanoPlot on the filtered and porechopped data NanoPlot -t 4 \\ --fastq nanofilt/Acinetobacter.nanofiltq10minlen500.porechop.fastq \\ -o nanoplot/nanofiltq10minlen500_porechop/ -p Acinetobacter_ \\ --plots hex "]]
