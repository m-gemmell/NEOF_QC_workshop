[["01-Long_read_QC.html", "Long read Quality Control Chapter 1 Introduction", " Long read Quality Control Matthew Gemmell &amp; Helen Hipperson 2021-02-08 Chapter 1 Introduction This practical session aims to introduce you to Long read Quality Control. The topics covered are: Acquiring the workshop data Example of PacBio quality control Example of ONT quality control "],["02-Intro.html", "Chapter 2 Introduction 2.1 The data", " Chapter 2 Introduction 2.1 The data The data for today is in the QC_workshop directory that you copied into your home directory (~) in the Illumina QC day. If you do not have this directory the command to copy it to your home directory is below. cp -r /pub39/tea/matthew/NEOF/QC_workshop/ ~ "],["03-PB.html", "Chapter 3 PacBio", " Chapter 3 PacBio "],["04-ONT.html", "Chapter 4 ONT 4.1 File formats 4.2 Basecalling and demultiplexxing 4.3 QC of fastq file", " Chapter 4 ONT 4.1 File formats 4.1.1 Summary file 4.1.2 Bam file 4.1.3 fastq file The fastq file format is thankfully very consistent and so there is no real difference between fastq files for Illumina, PacBio, and ONT data. All fastq files will contain a number of lines divisible by 4. This is because each entry/sequence will take up four lines consisting of the following information: Header for fastq entry known as the fastq header. This always begins with a @ This is where you might see the most difference between different data. Different machines and different public databases will use different formats for fastq headers. Sequence content Quality header Always begins with a +. Sometimes also contains the same information as fastq header. Quality Each base in the 2nd line will have a corresponding quality value in this line. Note this uses Phred encoding, of which there are different formats. Most, if not all, new files will use Phred+33 but be careful if you are using older data as it may use a different one. See the Encoding section in the following link for more info: https://en.wikipedia.org/wiki/FASTQ_format. NOTE: @ can be used as quality values. An example of the information of one sequence is: @Sequence 1 CTGTTAAATACCGACTTGCGTCAGGTGCGTGAACAACTGGGCCGCTTT + =&lt;&lt;&lt;=&gt;@@@ACDCBCDAC@BAA@BA@BBCBBDA@BB@&gt;CD@A@B?B@@ 4.2 Basecalling and demultiplexxing (Here give a quick intro to guides from basecalling and demultiplexxing of ONT data) 4.3 QC of fastq file For this tutorial we will carry out quality control and checking on fastq files. Some QC steps can be carried out on summary files and/or BAM files. However we will be using fastq files for a variety of reasons: fastq files are the smallest and so these processes will run quicker and the files will take up less storage. Ideal for a tutorial. You are most likely to be more familiar with fastq files and they are the easiest to work with. You will most likely use fastq files in the future for ONT data. If you get your data sequenced by a genomic centre they will most likely give you your data in demultiplexxed fastq files. ONT machines generally come with in built basecalling and so will most likely provide fastq files as well as the other formats now. Before carrying out any specific commands we will first move into the relevant directory. cd ~/QC_workshop/ONT_QC/ Initialise environment. This needs to be done if you start working in a new terminal. Each terminal will only remember what you have told it. . usenanopack-1.1.0 Look in the directory called data and you will notice there are a few directories. You can see the contents of all these directories with the below command. ls data/* You will notice that each directory has one fastq file. ONT data likes to be organised with data for one sample being in one file. This is reflected in the ONT software we will use that likes you to point it to a directory with one sample in it. To start with we will only use the fastq file within the directory called Acinetobacter. As you may have figured out this contains ONT sequencing data of an Acinetobacter genome. Specifically the data is a subset of the SRA (Sequence Read Archive) Run: SRR7119550. 4.3.1 NanoStat First step is to acquire stats for the sequences in our fastq file. We will use NanoStat (https://github.com/wdecoster/nanostat). NanoStat is one of the scripts of NanoPack (https://github.com/wdecoster/nanopack). We will also use the scripts NanoPlot and NanoFilt. We want to have a tidy set of directories at the end of this analysis. It would be a large mess to have all the output files in the current directory. We will therefore be making directories and subdirectories to send our output. mkdir nanostats Finally we will now run NanoStat. The options used are: -n : File name/path for the output. -t : Number of threads the script can use. --fastq : zData is in fastq format. Other options that can be used instead are --fasta, --summary, and --bam. NanoStat -n nanostats/Acinetobacter_nanostats.tsv \\ -t 4 --fastq ./data/Acinetobacter_genome_ONT.fastq Now we can look at the output with any software in Linux that can view text files. In this case we will use the convenient less. less nanostats/Acinetobacter_nanostats.tsv The files contains four section with informative headers. These are: General summary A list of general summary metrics. Number, percentage and megabases of reads above quality cutoffs Based on the mean quality value of a read. Top 5 highest mean basecall quality scores and their read lengths Shows the top 5 reads based on mean quality score. Top 5 longest reads and their mean basecall quality score Shows the top 5 reads based on read length. 4.3.2 Porechop https://github.com/rrwick/Porechop (Intro to porechop and useage Mention here that guppy(?) carries out porechop Porechop is no longer supported but additionally there is no alternative) mkdir porechop porechop -t 4 -i data/Acinetobacter -o porechop/Acinetobacter.porechop.fastq 4.3.3 NanoPlot https://github.com/wdecoster/NanoPlot Prior to running NanoPlot we will make a directory for NanoPlot output. NanoPlot makes a lot of files so within that directory well make a subdirectory for the NanoPlot output of porechopped fastq files. mkdir nanoplot mkdir nanoplot/porechop Now to run NanoPlot. NanoPlot -t 4 \\ --fastq porechop/Acinetobacter.porechop.fastq \\ -o nanoplot/porechop -p Acinetobacter_ \\ --plots hex May get below error which is file: /pub37/matt/programs_chos_8/anaconda3/lib/python3.7/_collections_abc.py:702: MatplotlibDeprecationWarning: The global colormaps dictionary is no longer considered public API. return len(self._mapping) /pub37/matt/programs_chos_8/anaconda3/lib/python3.7/_collections_abc.py:720: MatplotlibDeprecationWarning: The global colormaps dictionary is no longer considered public API. yield from self._mapping Check HMTL plot firefox nanoplot/porechop/Acinetobacter_NanoPlot-report.html 4.3.4 NanoFilt mkdir nanofilt cat porechop/Acinetobacter.porechop.fastq | \\ NanoFilt -l 500 -q 10 &gt; \\ nanofilt/Acinetobacter.nanofiltq10minlen500.porechop.fastq 4.3.5 Final check NanoStat -t 4 \\ -n nanostats/Acinetobacter_nanofiltq10minlen500_porechop_nanostats.tsv \\ --fastq nanofilt/Acinetobacter.nanofiltq10minlen500.porechop.fastq mkdir nanoplot/nanofiltq10minlen500_porechop NanoPlot -t 4 \\ --fastq nanofilt/Acinetobacter.nanofiltq10minlen500.porechop.fastq \\ -o nanoplot/nanofiltq10minlen500_porechop/ -p Acinetobacter_ \\ --plots hex "]]
